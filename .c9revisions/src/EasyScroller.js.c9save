{"ts":1340953513568,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var ScrollerManager = {\n\t_scrollers:[],\n\t_elements:[],\n\tget:function(id){\n\t\tif(id){\t\t\n\t\t\treturn this._elements[id];\n\t\t}else{\n\t\t\tconsole.log('ScrollerManager.get(): Argument id was missing.');\n\t\t\treturn false;\n\t\t}\n\t},\n\tadd:function(obj){\n\t\tif(obj instanceof EasyScroller){\t\t\t\t\t\n\t\t\tthis._elements[obj.container.id] = obj;\n\t\t\tthis._scrollers.push(obj);\t\t\n\t\t\treturn true;\t\n\t\t}else{\n\t\t\tconsole.log('ScrollerManager.add(): Argument was not of type EasyScroller.');\n\t\t\treturn false;\n\t\t}\n\t}\t\n}\n\n\nvar EasyScroller = function(content, options) {\n\t\n\tthis.content = content;\n\tthis.container = content.parentNode;\n\tthis.options = options || {};\n\tthis.suspended = false;\t\n\n\n\t// create Scroller instance\n\tvar that = this;\n\tthis.scroller = new Scroller(function(left, top, zoom) {\n\t\tthat.render(left, top, zoom);\n\t}, options);\n\n\t// bind events\n\tthis.bindEvents();\n\n\t// the content element needs a correct transform origin for zooming\n\tthis.content.style[EasyScroller.vendorPrefix + 'TransformOrigin'] = \"left top\";\n\n\t// reflow for the first time\n\tthis.reflow();\n\n};\n\nEasyScroller.prototype.render = (function() {\n\t\n\tvar docStyle = document.documentElement.style;\n\t\n\tvar engine;\n\tif (window.opera && Object.prototype.toString.call(opera) === '[object Opera]') {\n\t\tengine = 'presto';\n\t} else if ('MozAppearance' in docStyle) {\n\t\tengine = 'gecko';\n\t} else if ('WebkitAppearance' in docStyle) {\n\t\tengine = 'webkit';\n\t} else if (typeof navigator.cpuClass === 'string') {\n\t\tengine = 'trident';\n\t}\n\n\tvar vendorPrefix = EasyScroller.vendorPrefix = {\n\t\ttrident: 'ms',\n\t\tgecko: 'Moz',\n\t\twebkit: 'Webkit',\n\t\tpresto: 'O'\n\t}[engine];\n\t\n\tvar helperElem = document.createElement(\"div\");\n\tvar undef;\n\t\n\tvar perspectiveProperty = vendorPrefix + \"Perspective\";\n\tvar transformProperty = vendorPrefix + \"Transform\";\n\t\n\tif (helperElem.style[perspectiveProperty] !== undef) {\n\t\t\n\t\treturn function(left, top, zoom) {\n\t\t\tthis.content.style[transformProperty] = 'translate3d(' + (-left) + 'px,' + (-top) + 'px,0) scale(' + zoom + ')';\n\t\t};\t\n\t\t\n\t} else if (helperElem.style[transformProperty] !== undef) {\n\t\t\n\t\treturn function(left, top, zoom) {\n\t\t\tthis.content.style[transformProperty] = 'translate(' + (-left) + 'px,' + (-top) + 'px) scale(' + zoom + ')';\n\t\t};\n\t\t\n\t} else {\n\t\t\n\t\treturn function(left, top, zoom) {\n\t\t\tthis.content.style.marginLeft = left ? (-left/zoom) + 'px' : '';\n\t\t\tthis.content.style.marginTop = top ? (-top/zoom) + 'px' : '';\n\t\t\tthis.content.style.zoom = zoom || '';\n\t\t};\n\t\t\n\t}\n})();\n\nEasyScroller.prototype.reflow = function() {\n\n\t// set the right scroller dimensions\n\tthis.scroller.setDimensions(this.container.clientWidth, this.container.clientHeight, this.content.offsetWidth, this.content.offsetHeight);\n\n\t// refresh the position for zooming purposes\n\tvar rect = this.container.getBoundingClientRect();\n\tthis.scroller.setPosition(rect.left + this.container.clientLeft, rect.top + this.container.clientTop);\n\t\n};\n\nEasyScroller.prototype.bindEvents = function() {\n\n\tvar that = this;\n\n\t// reflow handling\n\twindow.addEventListener(\"resize\", function() {\n\t\tthat.reflow();\n\t}, false);\n\n\t// touch devices bind touch events\n\tif ('ontouchstart' in window) {\n\n\t\tthis.container.addEventListener(\"touchstart\", function(e) {\n\n\t\t\t// Don't react if initial down happens on a form element\n\t\t\tif (e.touches[0] && e.touches[0].target && e.touches[0].target.tagName.match(/input|textarea|select/i)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthat.scroller.doTouchStart(e.touches, e.timeStamp);\n\t\t\te.preventDefault();\n\n\t\t}, false);\n\n\t\tdocument.addEventListener(\"touchmove\", function(e) {\n\t\t\tthat.scroller.doTouchMove(e.touches, e.timeStamp, e.scale);\n\t\t}, false);\n\n\t\tdocument.addEventListener(\"touchend\", function(e) {\n\t\t\tthat.scroller.doTouchEnd(e.timeStamp);\n\t\t}, false);\n\n\t\tdocument.addEventListener(\"touchcancel\", function(e) {\n\t\t\tthat.scroller.doTouchEnd(e.timeStamp);\n\t\t}, false);\n\n\t// non-touch bind mouse events\n\t} else {\n\t\t\n\t\tvar mousedown = false;\n\n\t\tthis.container.addEventListener(\"mousedown\", function(e) {\n\n\t\t\tif (e.target.tagName.match(/input|textarea|select/i)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tthat.scroller.doTouchStart([{\n\t\t\t\tpageX: e.pageX,\n\t\t\t\tpageY: e.pageY\n\t\t\t}], e.timeStamp);\n\n\t\t\tmousedown = true;\n\t\t\te.preventDefault();\n\n\t\t}, false);\n\n\t\tdocument.addEventListener(\"mousemove\", function(e) {\n\n\t\t\tif (!mousedown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (that.suspended === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthat.scroller.doTouchMove([{\n\t\t\t\tpageX: e.pageX,\n\t\t\t\tpageY: e.pageY\n\t\t\t}], e.timeStamp);\n\n\t\t\tmousedown = true;\n\n\t\t}, false);\n\n\t\tdocument.addEventListener(\"mouseup\", function(e) {\n\n\t\t\tif (!mousedown) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthat.scroller.doTouchEnd(e.timeStamp);\n\n\t\t\tmousedown = false;\n\n\t\t}, false);\n\n\t\tthis.container.addEventListener(\"mousewheel\", function(e) {\n\t\t\tif(that.options.zooming) {\n\t\t\t\tthat.scroller.doMouseZoom(e.wheelDelta, e.timeStamp, e.pageX, e.pageY);\t\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t}, false);\n\n\t}\n\n};\n\n// automatically attach an EasyScroller to elements found with the right data attributes\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\t\n\tvar elements = document.querySelectorAll('[data-scrollable],[data-zoomable]'), element;\n\tfor (var i = 0; i < elements.length; i++) {\n\n\t\telement = elements[i];\n\t\t\n\t\t/*\t\t\n\t\t\t\t120527 Fix by ethanz5@github.com to support Android 2.3 uses element.attributes.getNamedItem to find element that specifies the 'data-scrollable' attribute.\n\t\t\t\tgithub.com/zynga/scroller/pull/15\n\t\t*/\n\t\tvar scrollable = element.attributes.getNamedItem('data-scrollable') ? element.attributes.getNamedItem('data-scrollable').value : null;\n\t\tvar zoomable = element.attributes.getNamedItem('data-zoomable') ? element.attributes.getNamedItem('data-zoomable').value : '';\n\t\t/* End Fix */\n\n\t\tvar zoomOptions = zoomable.split('-');\n\t\tvar minZoom = zoomOptions.length > 1 && parseFloat(zoomOptions[0]);\n\t\tvar maxZoom = zoomOptions.length > 1 && parseFloat(zoomOptions[1]);\n\n\t\tScrollerManager.add(new EasyScroller(element, {\n\t\t\tscrollingX: scrollable === 'true' || scrollable === 'x',\n\t\t\tscrollingY: scrollable === 'true' || scrollable === 'y',\n\t\t\tzooming: zoomable === 'true' || zoomOptions.length > 1,\n\t\t\tminZoom: minZoom,\n\t\t\tmaxZoom: maxZoom\n\t\t}));\n\n\t};\n\n}, false);\n"]],"start1":0,"start2":0,"length1":0,"length2":6157}]],"length":6157}
{"contributors":[],"silentsave":false,"ts":1340953588837,"patch":[[{"diffs":[[0,"\t}\n\t}\t\n}"],[1,";"],[0,"\n\n\nvar E"]],"start1":477,"start2":477,"length1":16,"length2":17},{"diffs":[[0,"}));\n\n\t}"],[-1,";"],[0,"\n\n}, fal"]],"start1":6136,"start2":6136,"length1":17,"length2":16}]],"length":6157,"saved":false}
